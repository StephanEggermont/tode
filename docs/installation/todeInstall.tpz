
! run with topaz -l -T50000 or larger

output pushnew tode.out only

level 1
iferr 1 stk
iferr 2 stack

set user DataCurator pass swordfish
login
run
| tode |
tode := AllUsers userWithId: 'tode' ifAbsent: [ nil ].
tode ~~ nil
  ifTrue: [ 
    AllUsers removeAndCleanup: tode.
    System commitTransaction.
 ].
(AllUsers 
  addNewUserWithId: 'tode'
  password: 'swordfish')
    addPrivilege: #'CodeModification';
    addPrivilege: #'UserPassword';
    addPrivilege: #'OtherPassword';
    yourself.
System commitTransaction.
%
run
| sample |
sample := AllUsers userWithId: 'sample' ifAbsent: [ nil ].
sample ~~ nil
  ifTrue: [ 
    AllUsers removeAndCleanup: sample.
    System commitTransaction.
 ].
(AllUsers 
  addNewUserWithId: 'sample'
  password: 'swordfish')
    addPrivilege: #'CodeModification';
    addPrivilege: #'UserPassword';
    addPrivilege: #'OtherPassword';
    yourself.
System commitTransaction.
%
logout
errorCount

set user tode pass swordfish
login

!
! Define which SymbolDictionary into which all classes are to be installed.
!
run
System myUserProfile _createDictionary: #tODE at: 1.
UserGlobals at: #BootstrapSymbolDictionaryName put: #tODE.
true
%
commit
errorCount

!
! Create SymbolAssociation class for local storage of class variable state
!

doit
SymbolAssociation subclass: 'IndirectSymbolAssociation'
instVarNames: #()
classVars: #( )
classInstVars: #()
poolDictionaries: #()
inDictionary: tODE
instancesInvariant: false
isModifiable: false.
true
%
commit
errorCount

input IndirectSymbolAssociation.st
commit
errorCount

run
Class classVariablesAssociationClass: IndirectSymbolAssociation.
%
commit
errorCount

!
! Install GLASS
!
run
UserGlobals at: #BootstrapSymbolDictionaryName put: #tODE.
%

input installMaster30.topaz

!
! Upgrade to GLASS 1.0-beta.9
!
run
ConfigurationOfGLASS project updateProject.
GsDeployer deploy: [ (ConfigurationOfGLASS project version: '1.0-beta.9') load ].
%
commit
errorCount

!
! Install tode
!
run
Metacello new
  baseline: #('Topez');
  repository: 'filetree:///opt/git/topez/packages';
  get.
Metacello new
  baseline: #('Topez');
  repository: 'filetree:///opt/git/topez/packages';
  load: 'ALL'.
%
commit
errorCount

logout

set user sample pass swordfish
login

!
! Install tode in sample
!

run
| tode sessionMethodsPackage serverClass symbolDict todePackage stealthSymbolDictionary globalDict |
serverClass := ((AllUsers userWithId: 'tode' ifAbsent: [ nil ]) symbolList
  detect: [ :dict | dict name == #'tODE' ]) at: #'TDTopezServer'.
tode := AllUsers userWithId: 'tode' ifAbsent: [ nil ].
symbolDict := tode symbolList detect: [ :dict | dict name == #'tODE' ].
todePackage := symbolDict at: GsPackage globalName.
sessionMethodsPackage := GsPackageLibrary createPackageNamed: #'SessionMethods'.
globalDict := UserGlobals.
stealthSymbolDictionary := SymbolDictionary new
  name: #'todeSessionMethods';
  yourself.
stealthSymbolDictionary at: GsPackage globalName put: todePackage.
(System myUserProfile symbolList objectNamed: stealthSymbolDictionary name)
  == nil
  ifTrue: [ System myUserProfile symbolList add: stealthSymbolDictionary before: globalDict ].
(GsSession currentSession symbolList objectNamed: stealthSymbolDictionary name)
  == nil
  ifTrue: [ 
    GsSession currentSession symbolList
      add: stealthSymbolDictionary
      before: globalDict ].
GsPackagePolicy current enable
%
commit
errorCount

run
| tode symbolDict |
tode := AllUsers userWithId: 'tode' ifAbsent: [ nil ].
symbolDict := tode symbolList detect: [ :dict | dict name == #'tODE' ].
System myUserProfile symbolList
      add: symbolDict
      before: UserGlobals.
%

run
Base64MimeConverter initialize.
ChronologyConstants initialize.
Color initialize.
MczInstaller initialize.
RxMatcher initialize.
RxParser initialize.
RxsPredicate initialize.
Scanner initialize.
SessionMethodTransactionBoundaryPolicy initialize.
SmalltalkProxy initialize.
SpSocket initialize.
HTTPSocket initialize.
SystemLoginNotification initialize.
SystemOrganizer initialize.
TranscriptProxy initialize.
ZipConstants initialize.
ZipFileConstants initialize.
ZipReadStream initialize.
ZipWriteStream initialize.
DataStream initialize.
MCCacheRepository initialize.
MCMethodDefinition initialize.
MCMockClassA initialize.
MCVersionReader initialize.
MCWorkingCopy initialize.
PackageInfo initialize.
MCDirtyPackageInfo initialize.
MCEmptyPackageInfo initialize.
MCMockPackageInfo initialize.
PackageServices initialize.
PseudoClassOrganizer initialize.
UUIDGenerator initialize.
MCGitHubRepository initialize.
MetacelloPlatform initialize.
MetacelloGemStonePlatform initialize.
GemToGemAnnouncement initialize.
SecureHashAlgorithm initialize.
GRGemStonePlatform initialize.
GRGemStoneRandomProvider initialize.
GRInflector initialize.
GRNumberPrinter initialize.
MCFileTreeFileDirectoryUtils initialize.
STONWriter initialize.
TDAbstractDevTool initialize.
TDDebugTool initialize.
TDTestTool initialize.
TZEvaluator initialize.
TZObject initialize.
TZProxyObject initialize.
RBAbstractClass initialize.
RBClass initialize.
RBConfigurableFormatter initialize.
RBGemStonePlatform initialize.
RBRefactoring initialize.
RBRefactoryChangeManager initialize.
RBScanner initialize.
RBSpellChecker initialize.
RBTransformationRule initialize.
%

run
| tode symbolDict |
tode := AllUsers userWithId: 'tode' ifAbsent: [ nil ].
symbolDict := tode symbolList detect: [ :dict | dict name == #'tODE' ].
System myUserProfile symbolList
      remove: symbolDict.
%

commit
errorCount

logout

time
output pop
errorCount

