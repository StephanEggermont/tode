TDDirectoryNode{#name:'home',#contents:{'tode':TDDirectoryNode{#name:'tode',#contents:{'initTools':TDSmalltalkLeafNode{#name:'initTools',#contents:'TDStandardTool initializeTools'},'gitRepo':TDObjectGatewayNode{#name:'gitRepo',#contents:'| repo |\nrepo := (self topez lookup: \'repo\') dotSelfObject.\nrepo directory containingDirectory'},'merging':TDTopezLeafNode{#name:'merging',#contents:'browse category Monticello-Merging'},'tstRepo':TDObjectGatewayNode{#name:'tstRepo',#contents:'(TDMonticelloRepository\n  fromDescription: \'http://seaside.gemstone.com/ss/monticello\') repository'},'todo':TDTxtLeafNode{#name:'todo',#contents:Text{#string:'1. bedit should take an edit script object as arg...pick an editing language...vi/awk/sed ... maybe just pass the source into awk/sed ...\r2. merge tool badly needed!\r3. object log/debugger link\r4. opening the globals on far right side (option for wider displays)\r5. consider method protocol windows on left?\r6. mv /home/test to /tmp/test/randomNum dir?\r7. isolate window sizing from sesssion descriptions on client\r8. finish implementation of `find symbolists` and `find symbolList` using TDSymbolDictionaryDefinition and TDSymbolListList',#runs:RunArray{#runs:[489,28,21],#values:[[],[TextColor{#color:Color{#rgb:536871424}}],[]],#lastIndex:518,#lastRun:3,#lastOffset:0}}},'tools':TDTopezLeafNode{#name:'tools',#contents:'browse hierarchy TDAbstractDevTool'},'load':TDTopezLeafNode{#name:'load',#contents:'/home/bin/load Tode `GemStone Dev` \r./initTools'},'status':TDTxtLeafNode{#name:'status',#contents:'commit 3442661b9aae6e98bdc26bfea6d15ccfeedee293\nAuthor: Dale Henrichs <dale.henrichs@gemtalksystems.com>\nDate:   Wed Sep 4 01:21:47 2013 -0700\n\n    checkpoint: Implement `git mergetool` command\n    \n    Add control for loggin in TDAbstractDevTool>>performOnServer:logging:\n    \n    remove TDCypressTool>>cypmerge and TDCypressTool>>cymmerge ... cypress merges handled by `git mergetool`\n'},'commitMessage':TDTxtLeafNode{#name:'commitMessage',#contents:Text{#string:'checkpoint: Implement `git mergetool` command \r\rAdd control for loggin in TDAbstractDevTool>>performOnServer:logging: \r\rremove TDCypressTool>>cypmerge and TDCypressTool>>cymmerge ... cypress merges handled by `git mergetool`',#runs:RunArray{#runs:[64,53,10,97],#values:[[],[TextColor{#color:Color{#rgb:1023}}],[],[TextColor{#color:Color{#rgb:1072693248}}]],#lastIndex:207,#lastRun:4,#lastOffset:79}}},'commit':TDTopezLeafNode{#name:'commit',#contents:'/home/bin/commit Tode @commitMessage'},'nodes':TDTopezLeafNode{#name:'nodes',#contents:'browse hierarchy TDNode'},'repo':TDObjectGatewayNode{#name:'repo',#contents:'(TDMonticelloRepository fromDescription: \'filetree:///opt/git/tode/repository\')\n  repository'},'diff':TDTopezLeafNode{#name:'diff',#contents:'mm diff Tode'},'browse':TDTopezLeafNode{#name:'browse',#contents:'browse project Tode'},'filter':TDSmalltalkLeafNode{#name:'filter',#contents:'[ :definition | \ndefinition configurationOf\n  ifNil: [ false ]\n  ifNotNil: [ :configurationDef | configurationDef configurationName = \'Tode\' ] ]'},'scratch':TDTxtLeafNode{#name:'scratch',#contents:Text{#string:'    GsIndexSpec new\r      unicodeIndex: \'each.#car.color\' \r        collator: IcuCollator default;\r      rcUnicodeIndex: \'each.firstName\' \r        collator: (IcuCollator forLocaleNamed: \'en_GB\')\r        requireUnicodeStrings: true;\r      createIndexesOn: myEmployees.\r',#runs:RunArray{#runs:[267],#values:[[TextColor{#color:Color{#rgb:0}}]],#lastIndex:232,#lastRun:1,#lastOffset:231}}},'x':TDTopezLeafNode{#name:'x',#contents:'#mc compare image Squeak Squeak-dkh.290 @tstRepo\r#cyp merge d499ce35246e539782c28ddcfc3b48ce665099e6 d499ce35246e539782c28ddcfc3b48ce665099e6 @gitRepo\rmc merge Monticello Monticello.g-dkh.447 @tstRepo\r'}}},'rb':TDDirectoryNode{#name:'rb',#contents:{'gitRepo':TDObjectGatewayNode{#name:'gitRepo',#contents:'| repo |\rrepo := (self topez lookup: \'repo\') dotSelfObject.\rrepo directory containingDirectory'},'repo':TDObjectGatewayNode{#name:'repo',#contents:'(TDMonticelloRepository fromDescription: \'filetree:///opt/git/rb/repository\') repository'},'commit':TDTopezLeafNode{#name:'commit',#contents:'/home/bin/commit RB @commitMessage'},'commitMessage':TDTxtLeafNode{#name:'commitMessage',#contents:''},'browse':TDTopezLeafNode{#name:'browse',#contents:'browse project RB'},'diff':TDTopezLeafNode{#name:'diff',#contents:'mm diff RB'},'load':TDTopezLeafNode{#name:'load',#contents:'/home/bin/load RB default'},'status':TDTxtLeafNode{#name:'status',#contents:'edit ./load if you don\'t want to use default and you are good to go'}}},'todo':TDTxtLeafNode{#name:'todo',#contents:Text{#string:'------------\r1. indexing spec updates:\r   - enumerated path term\r   - new index scheme\r   - rewrite spec\r2. Metacello \r[]   - Chistophe\'s pull request\r[]   - squeak4.5 issue\r3. glassdb stuff\r   - branch for Monticello versus Monticello.v3\r4. Sebastian Zinc issue.\r5. `bu list` should be a TDBackupReport object ... with those fields \r6. responses\r    - Ken tries response\r    - Mark Veigle response\r7. FileTree\r8. ESUG presentation\r',#runs:RunArray{#runs:[13,73,1,18,68,259],#values:[[TextColor{#color:Color{#rgb:0}}],[],[TextColor{#color:Color{#rgb:0}}],[],@69,@72],#lastIndex:412,#lastRun:6,#lastOffset:238}}},'today':TDTxtLeafNode{#name:'today',#contents:Text{#string:'dkh 9/1/2013 07:02\r1. Pharo 2.0 and Pharo 3.0 filetree and metacello\r[x]2. tode tests passing\r3. Indexing grammar\r4. []tODE merging: Monticello and Git',#runs:RunArray{#runs:[113,4,1,33],#values:[[TextColor{#color:Color{#rgb:0}}],[],[TextEmphasis{#emphasisCode:1,#setMode:true}],@81],#lastIndex:119,#lastRun:4,#lastOffset:0}}},'filetree':TDDirectoryNode{#name:'filetree',#contents:{'deploy':TDScriptLeafNode{#name:'deploy',#contents:'^ [ :topez \"This is source for a block.  \" :objIn :tokens :windowId | \n(MCNewFileTreeTodeTool\n  topez: topez\n  objIn: objIn\n  tokens: tokens\n  windowId: windowId) deploy ]'},'gitRepo':TDObjectGatewayNode{#name:'gitRepo',#contents:'| repo |\rrepo := (self topez lookup: \'repo\') dotSelfObject.\rrepo directory containingDirectory'},'notes':TDTxtLeafNode{#name:'notes',#contents:Text{#string:'1.0.5:\r  [x]Issue #11: \r    mostly addressed by Tobias... open new issue for 1.0.6 \r    cherry-pick for pharo3.0 only\r  [x]Issue #92: \r    fix distributed to other platforms \r  [x] #97: \r    fix distributed to other platforms\r  [x]Issue #101:\r    fix distributed to other platforms (needed for clean Issue #11 merge)\r  \r[]pharo13\r[]squeak4.3\r[]pharo11\r[]pharo14\r[]pharo20\r[]pharo30\r[]gemstone24\r',#runs:RunArray{#runs:[228,1,101,1,64],#values:[[],[TextEmphasis{#emphasisCode:1,#setMode:true}],@93,[TextEmphasis{#emphasisCode:1,#setMode:true}],@93],#lastIndex:332,#lastRun:5,#lastOffset:0}}},'commitMessage':TDTxtLeafNode{#name:'commitMessage',#contents:Text{#string:'',#runs:RunArray{#runs:[],#values:[],#lastIndex:nil,#lastRun:nil,#lastOffset:nil}}},'configRepo':TDObjectGatewayNode{#name:'configRepo',#contents:'(TDMonticelloRepository\n  fromDescription: \'filetree:///opt/git/config/filetree/repository\') repository'},'load':TDTopezLeafNode{#name:'load',#contents:'/home/bin/load FileTree ALL'},'status':TDTxtLeafNode{#name:'status',#contents:'commit 3e59301287f14b7accc9b261d68eca6d57db7456\nAuthor: Dale Henrichs <dhenrich@vmware.com>\nDate:   Sun Aug 11 07:58:47 2013 -0700\n\n    ensure ss3 version is in ancestry\n'},'analysis':TDTxtLeafNode{#name:'analysis',#contents:Text{#string:'deploy  <version> <configRepo> <ss3Repo> <tmpRepo> `commitMessage`',#runs:RunArray{#runs:[66],#values:[[]],#lastIndex:1,#lastRun:1,#lastOffset:0}}},'browse':TDTopezLeafNode{#name:'browse',#contents:'browse project FileTree'},'commit':TDTopezLeafNode{#name:'commit',#contents:'/home/bin/commit FileTree @commitMessage'},'altRepo':TDObjectGatewayNode{#name:'altRepo',#contents:'(TDMonticelloRepository fromDescription: \'http://ss3.gemstone.com/ss/FileTree\')\n  repository'},'tmpRepo':TDObjectGatewayNode{#name:'tmpRepo',#contents:'(TDMonticelloRepository\n  fromDescription: \'filetree:///opt/git/tmp/filetree/repository\') repository'},'diff':TDTopezLeafNode{#name:'diff',#contents:'mm diff FileTree'},'repo':TDObjectGatewayNode{#name:'repo',#contents:'(TDMonticelloRepository fromDescription: \'filetree:///opt/git/gs/filetree/repository\') repository'},'lock':TDSmalltalkLeafNode{#name:'lock',#contents:'Metacello new\n  baseline: \'FileTree\';\n  repository: \'filetree:///opt/git/gs/filetree/repository\';\n  lock'},'filter':TDSmalltalkLeafNode{#name:'filter',#contents:'[ :definition | \ndefinition configurationOf\n  ifNil: [ false ]\n  ifNotNil: [ :configurationDef | configurationDef configurationName = \'FileTree\' ] ]'},'doDeploy':TDTopezLeafNode{#name:'doDeploy',#contents:'./deploy 1.0.6.1 @configRepo http://ss3.gemstone.com/ss/FileTree @tmpRepo @commitMessage true'},'pharo3.0Repo':TDObjectGatewayNode{#name:'pharo3.0Repo',#contents:'(TDMonticelloRepository\n  fromDescription: \'filetree:///opt/git/pharo30/filetree/repository\') repository'}}},'glass':TDDirectoryNode{#name:'glass',#contents:{'gitRepo':TDObjectGatewayNode{#name:'gitRepo',#contents:'| repo |\rrepo := (self topez lookup: \'repo\') dotSelfObject.\rrepo directory containingDirectory'},'repo':TDObjectGatewayNode{#name:'repo',#contents:'(TDMonticelloRepository fromDescription: \'filetree:///opt/git/glass/repository\') repository'},'commit':TDTopezLeafNode{#name:'commit',#contents:'/home/bin/commit GLASS1 @commitMessage'},'commitMessage':TDTxtLeafNode{#name:'commitMessage',#contents:Text{#string:'work to improve definition diff capabilities:\r\rAdd UseTimeStampInComparisons class var to MCMethodDefinition to control whether or not the method timeStamp is significant or not during equality comparisons.\r\ruseful printString defined for MCConflict>>printOn:.\r\ruse #trimBoth on source in MCMethodDefinition>>= ... no need to generate diffs because of trailing separators.',#runs:RunArray{#runs:[51,25,14,18,131,20,113],#values:[[],[TextColor{#color:Color{#rgb:1023}}],@132,@133,[],[TextColor{#color:Color{#rgb:1023}}],[]],#lastIndex:47,#lastRun:1,#lastOffset:46}}},'browse':TDTopezLeafNode{#name:'browse',#contents:'browse project GLASS1'},'diff':TDTopezLeafNode{#name:'diff',#contents:'mm diff GLASS1'},'load':TDTopezLeafNode{#name:'load',#contents:'/home/bin/load GLASS1 default'},'status':TDTxtLeafNode{#name:'status',#contents:'commit 6f7c578d1effe05b442aba1d07a9a93974de9db4\nAuthor: Dale Henrichs <dale.henrichs@gemtalksystems.com>\nDate:   Tue Sep 3 14:55:38 2013 -0700\n\n    work to improve definition diff capabilities:\n    \n    Add UseTimeStampInComparisons class var to MCMethodDefinition to control whether or not the method timeStamp is significant or not during equality comparisons.\n    \n    useful printString defined for MCConflict>>printOn:.\n    \n    use #trimBoth on source in MCMethodDefinition>>= ... no need to generate diffs because of trailing separators.\n'}}},'metacello':TDDirectoryNode{#name:'metacello',#contents:{'gitRepo':TDObjectGatewayNode{#name:'gitRepo',#contents:'| repo |\rrepo := (self topez lookup: \'repo\') dotSelfObject.\rrepo directory containingDirectory'},'commit':TDTopezLeafNode{#name:'commit',#contents:'/home/bin/commit Metacello @commitMessage'},'commitMessage':TDTxtLeafNode{#name:'commitMessage',#contents:Text{#string:'Issue #202: add error logging, too',#runs:RunArray{#runs:[12,4,5,13],#values:[[TextColor{#color:Color{#rgb:512}}],[],[TextColor{#color:Color{#rgb:0}}],[]],#lastIndex:22,#lastRun:4,#lastOffset:0}}},'load':TDTopezLeafNode{#name:'load',#contents:'/home/bin/load Metacello ALL'},'status':TDTxtLeafNode{#name:'status',#contents:'commit 21c694b15d65a95f9ada4de86196060657f4fb1d\nAuthor: Dale Henrichs <dale.henrichs@gemtalksystems.com>\nDate:   Sun Sep 8 09:30:45 2013 -0700\n\n    set raise deprecation warning to false\n'},'diff':TDTopezLeafNode{#name:'diff',#contents:'mm diff Metacello'},'browse':TDTopezLeafNode{#name:'browse',#contents:'browse project Metacello'},'repo':TDObjectGatewayNode{#name:'repo',#contents:'(TDMonticelloRepository fromDescription: \'filetree:///opt/git/metacello-work/repository\') repository'},'browseSpecs':TDTopezLeafNode{#name:'browseSpecs',#contents:'browse hierarchy MetacelloSpec'},'pharo30':TDTxtLeafNode{#name:'pharo30',#contents:Text{#string:'MetacelloToolBox>>addSection:repository:requiredProjects:packages:dependencies:includes:files:repositories:preLoadDoIts:postLoadDoIts:supplyingAnswers:groups:versionSpecsDo:\r changed to add  a loadList per project\r\rfor project:\r  version:\r  loads:\r[x]  repository:\r\rreview packages and make sure that we cover all of the creation options...\r\rgenerate configurations compatible with old version...\r\rvisitor pattern that duplicates the directive creation\r\rvisitor pattern for dependency graph ... version \r\r',#runs:RunArray{#runs:[173,332],#values:[[TextColor{#color:Color{#rgb:0}}],[]],#lastIndex:398,#lastRun:2,#lastOffset:224}}}}},'bin':TDDirectoryNode{#name:'bin',#contents:{'log':TDTxtLeafNode{#name:'log',#contents:Text{#string:'dkh 9/4/2013 01:24\r  - commit command returns committed versions...\rdkh 9/3/2013 10:11\r  - fix ./load so that it doesn\'t choke if a non-git repo is being loaded\r    also fix commit the same way...\r  - mapRepos needs to NOT map repositories if there is a repo specified for the \r    package itself\r',#runs:RunArray{#runs:[86,211],#values:[[TextColor{#color:Color{#rgb:0}}],[]],#lastIndex:nil,#lastRun:nil,#lastOffset:nil}}},'commit':TDScriptLeafNode{#name:'commit',#contents:'[ :topez :objIn :tokens :windowId | \n| projectName commitMessage mmTool commitedVersions |\n\"/home/bin/commit Tode `commit message`\r/home/bin/commit Tode @commitMessage\"\nprojectName := tokens at: 2.\ncommitMessage := tokens at: 3.\nmmTool := topez toolInstanceFor: \'mm\'.\n(commitMessage beginsWith: \'@\')\n  ifTrue: [ commitMessage := (mmTool resolveAtPathReference: commitMessage) asString ].\nTranscript\n  cr;\n  show: \'======= committing \' , projectName printString , \'=======\'.\ncommitedVersions := mmTool mmCommit: projectName commitMessage: commitMessage.\ncommitedVersions isEmpty\n  ifTrue: [ \'No dirty packages to commit\' ]\n  ifFalse: [ \n    | repo |\n    repo := (topez lookup: \'repo\') dotSelfObject.\n    repo class description = MCFileTreeRepository description\n      ifTrue: [ \n        | status statusNode gitRepoDir gitTool commitMessageFileName |\n        gitRepoDir := (topez lookup: \'gitRepo\') dotSelfObject.\n        gitTool := topez toolInstanceFor: \'git\'.\n        commitMessageFileName := gitTool createTmpFileWith: commitMessage.\n        gitTool\n          gitaddIn: gitRepoDir with: \'.\';\n          gitstatusIn: gitRepoDir with: \'\';\n          gitcommitIn: gitRepoDir with: \'-a --file=\' , commitMessageFileName;\n          gitstatusIn: gitRepoDir with: \'\'.\n        status := gitTool gitlogIn: gitRepoDir with: \'-1\'.\n        Transcript\n          cr;\n          show: \'==============\'.\n        statusNode := topez\n          lookup: \'status\'\n          ifAbsent: [ \n            topez currentNode\n              addChildNode:\n                (TDTxtLeafNode new\n                  name: \'status\';\n                  yourself) ].\n        statusNode contents: status.\n         commitedVersions] ] ]'},'create':TDScriptLeafNode{#name:'create',#contents:'[ :topez :objIn :tokens :windowId | \n| directoryName projectName repositoryDescription directoryNode status useConfig useCypress |\n\"/home/bin/create tode Tode filetree:///opt/git/tode/repository [baseline|config|cypress]\"\ndirectoryName := tokens at: 2.\nprojectName := tokens at: 3.\nrepositoryDescription := tokens at: 4.\nuseConfig := false.\nuseCypress := false.\ntokens size > 4\n  ifTrue: [ \n    useConfig := (tokens at: 5) = \'config\'.\n    useCypress := (tokens at: 5) = \'cypress\' ].\ndirectoryNode := topez\n  lookup: directoryName\n  ifAbsent: [ \n    topez currentNode\n      addChildNode:\n        (TDDirectoryNode new\n          name: directoryName;\n          yourself) ].\nuseConfig\n  ifTrue: [ \n    status := \'edit ./load to set correct project version number and load list\'.\n    directoryNode\n      addChildNode:\n          (TDTopezLeafNode new\n              name: \'commit\';\n              contents:\n                  \'/home/bin/commitConfig \' , projectName , \' @commitMessage\';\n              yourself);\n      addChildNode:\n          (TDTopezLeafNode new\n              name: \'load\';\n              contents: \'/home/bin/loadConfig \' , projectName , \' 1.0.0 default\';\n              yourself);\n      yourself ]\n  ifFalse: [ \n    useCypress\n      ifTrue: [ \n    status := \'edit ./load if you don\'\'t want to use default and you are good to go & edit ./cypressRepo\'.\r        directoryNode\n          addChildNode:\n            (TDTopezLeafNode new\n              name: \'commit\';\n              contents:\n                  \'/home/bin/commitCypress \' , projectName , \' @cypressRepo @commitMessage\';\n              yourself) ]\n      ifFalse: [ \n    status := \'edit ./load if you don\'\'t want to use default and you are good to go\'.\r        directoryNode\n          addChildNode:\n            (TDTopezLeafNode new\n              name: \'commit\';\n              contents: \'/home/bin/commit \' , projectName , \' @commitMessage\';\n              yourself) ].\n    directoryNode\n      addChildNode:\n        (TDTopezLeafNode new\n          name: \'load\';\n          contents: \'/home/bin/load \' , projectName , \' default\';\n          yourself) ].\ndirectoryNode\n  addChildNode:\n      (TDTopezLeafNode new\n          name: \'browse\';\n          contents: \'browse project \' , projectName;\n          yourself);\n  addChildNode:\n      (TDTxtLeafNode new\n          name: \'commitMessage\';\n          contents: \'\';\n          yourself).\nuseCypress\n  ifTrue: [ \n    directoryNode\n      addChildNode:\n          (TDTopezLeafNode new\n              name: \'cypressRepo\';\n              contents: \'| repo |\rrepo := CypressFileSystemRepository\r  onUrl:\r    \' , repositoryDescription printString , \' asUrl\r  alias: \' , projectName printString , \'.\rrepo gemStoneFileoutsEnabled: true.\rrepo\';\n              yourself);\n      addChildNode:\n          (TDTopezLeafNode new\n              name: \'diff\';\n              contents: \'cym diff \' , projectName , \' @cypressRepo\';\n              yourself);\n      yourself ]\n  ifFalse: [ \n    directoryNode\n      addChildNode:\n        (TDTopezLeafNode new\n          name: \'diff\';\n          contents: \'mm diff \' , projectName;\n          yourself) ].\ndirectoryNode\n  addChildNode:\n      (TDObjectGatewayNode new\n          name: \'gitRepo\';\n          contents: \'| repo |\rrepo := (self topez lookup: \'\'repo\'\') dotSelfObject.\rrepo directory containingDirectory\';\n          yourself);\n  addChildNode:\n      (TDObjectGatewayNode new\n          name: \'repo\';\n          contents:\n              \'(TDMonticelloRepository fromDescription: \' , repositoryDescription printString\n                  , \') repository\';\n          yourself);\n  addChildNode:\n      (TDTxtLeafNode new\n          name: \'status\';\n          contents: status;\n          yourself);\n  yourself.\nstatus ]'},'primeRegistry':TDSmalltalkLeafNode{#name:'primeRegistry',#contents:'MetacelloProjectRegistration resetRegistry.\t\"reset registry and lock FileTree and Metacello projects\"\nMetacello new\n  baseline: \'FileTree\';\n  repository: \'filetree:///opt/git/gs/filetree/repository\';\n  lock.\nMetacello new\n  baseline: \'Metacello\';\n  repository: \'filetree:///opt/git/metacello-work/repository\';\n  lock.\nMetacelloProjectRegistration primeRegistryFromImage'},'halt':TDSmalltalkLeafNode{#name:'halt',#contents:'\"opportunity to use debugger\"\n| block |\nblock := [:arg | arg halt].\nblock value: 100'},'loadConfig':TDScriptLeafNode{#name:'loadConfig',#contents:'[ :topez :objIn :tokens :windowId | \n| projectName version loads repo description status statusNode |\n\"/home/bin/loadConfig Seaside 3.0.7.1 default\"\nprojectName := tokens at: 2.\nversion := tokens at: 3.\nloads := \'default\'.\ntokens size > 3\n  ifTrue: [ loads := tokens copyFrom: 3 to: tokens size ].\nrepo := (topez lookup: \'repo\') dotSelfObject.\ndescription := repo description.\nMetacello new\n  configuration: projectName;\n  repository: description;\n  get.\nMetacello new\n  configuration: projectName;\n  version: version;\n  repository: description;\n  onConflict: [ :ex | ex allow ];\n  onWarning: [ :ex | \n        Transcript\n          cr;\n          show: \'WARNING: \' , ex description.\n        ex resume ];\n  load: loads.\nstatusNode := topez\n  lookup: \'status\'\n  ifAbsent: [ \n    topez currentNode\n      addChildNode:\n        (TDTxtLeafNode new\n          name: \'status\';\n          yourself) ].\nstatusNode\n  contents:\n    \'Loaded Configuration: \' , projectName printString , \' version \'\n      , version printString , \' from: \' , repo description.\nstatus ]'},'load':TDScriptLeafNode{#name:'load',#contents:'[ :topez :objIn :tokens :windowId | \n| projectName loads repo description |\n\"/home/bin/load Tode `GemStone Dev`\"\nprojectName := tokens at: 2.\nloads := \'default\'.\ntokens size > 2\n  ifTrue: [ loads := tokens copyFrom: 3 to: tokens size ].\nrepo := (topez lookup: \'repo\') dotSelfObject.\ndescription := repo description.\nGsDeployer bulkMigrate: [Metacello new\n  baseline: projectName;\n  repository: description;\n  get.\nMetacello new\n  baseline: projectName;\n  repository: description;\n  onConflict: [ :ex | ex allow ];\n  onWarning: [ :ex | \n        Transcript\n          cr;\n          show: \'WARNING: \' , ex description.\n        ex resume ];\n  load: loads].\nrepo class description = MCFileTreeRepository description\n  ifTrue: [ \n    | gitRepo gitTool statusNode status |\n    gitRepo := (topez lookup: \'gitRepo\') dotSelfObject.\n    gitTool := topez toolInstanceFor: \'git\'.\n    status := gitTool performGitCommand: \'log\' in: gitRepo with: \'-1\'.\n    statusNode := topez\n      lookup: \'status\'\n      ifAbsent: [ \n        topez currentNode\n          addChildNode:\n            (TDTxtLeafNode new\n              name: \'status\';\n              yourself) ].\n    statusNode contents: status.\n    status ] ]'},'commitConfig':TDScriptLeafNode{#name:'commitConfig',#contents:'[ :topez :objIn :tokens :windowId | \n| projectName commitMessage mmTool commitedVersions |\n\"/home/bin/commitConfig Seaside30 `commit message`\r/home/bin/commitConfig Seaside30 @commitMessage\"\nprojectName := tokens at: 2.\ncommitMessage := tokens at: 3.\nmmTool := topez toolInstanceFor: \'mm\'.\n(commitMessage beginsWith: \'@\')\n  ifTrue: [ commitMessage := (mmTool resolveAtPathReference: commitMessage) asString ].\nTranscript\n  cr;\n  show: \'======= committing \' , projectName printString , \'=======\'.\ncommitedVersions := mmTool mmCommit: projectName commitMessage: commitMessage.\ncommitedVersions isEmpty\n  ifTrue: [ \'No dirty packages to commit\' ]\n  ifFalse: [ \n    | statusNode status version projectSpec |\n    projectSpec := Metacello image\n      project: projectName;\n      list.\n    MetacelloToolBox\n      updateDevelopment: projectSpec versionString\n      for: projectName\n      updatePackages: true\n      description: commitMessage.\r\tstatus := \'Committed Configuration: \' , projectName printString , \' version \'\r      , version printString , \' \' , commitMessage printString.\n    Transcript\n      cr;\n      show: \'==============\'.\n    statusNode := topez\n      lookup: \'status\'\n      ifAbsent: [ \n        topez currentNode\n          addChildNode:\n            (TDTxtLeafNode new\n              name: \'status\';\n              yourself) ].\n    statusNode contents: status.\n    status ] ]'},'import':TDScriptLeafNode{#name:'import',#contents:'[ :topez :objIn :tokens :windowId | \n| stonTool |\nstonTool := topez toolInstanceFor: \'ston\'.\nstonTool\n  stonImportFrom: \'/opt/git/tode/fast/home.ston\' to: (topez lookup: \'/\');\n  stonImportFrom: \'/opt/git/tode/fast/bin.ston\' to: (topez lookup: \'/home\').\ntopez setCurrentNode: (topez lookup: \'/home\') ]'},'export':TDScriptLeafNode{#name:'export',#contents:'[ :topez :objIn :tokens :windowId | \n| stonTool |\nstonTool := topez toolInstanceFor: \'ston\'.\nstonTool\n  stonExportNode: (topez lookup: \'/home\') to: \'/opt/git/tode/fast/home.ston\';\n  stonExportNode: (topez lookup: \'/home/bin\') to: \'/opt/git/tode/fast/bin.ston\' ]'},'commitCypress':TDScriptLeafNode{#name:'commitCypress',#contents:'[ :topez :objIn :tokens :windowId | \n| projectName commitMessage cypressTool cypressRepo gitRepoDir gitTool status statusNode commitMessageFileName |\n\"/home/bin/commitCypress Cypress  @cypressRepo @commitMessage\"\ncypressTool := topez toolInstanceFor: \'cym\'.\nprojectName := tokens at: 2.\ncypressRepo := cypressTool resolveAtPathReference: (tokens at: 3).\ncommitMessage := (cypressTool resolveAtPathReference: (tokens at: 4)) asString.\nTranscript\n  cr;\n  show: \'======= committing \' , projectName printString , \'=======\'.\ncypressTool cymSave: projectName to: cypressRepo.\ngitRepoDir := (topez lookup: \'gitRepo\') dotSelfObject.\ngitTool := topez toolInstanceFor: \'git\'.\ncommitMessageFileName := gitTool createTmpFileWith: commitMessage.\ngitTool\n  gitaddIn: gitRepoDir with: \'.\';\n  gitstatusIn: gitRepoDir with: \'\';\n  gitcommitIn: gitRepoDir with: \'-a --file=\' , commitMessageFileName;\n  gitstatusIn: gitRepoDir with: \'\'.\nstatus := gitTool gitlogIn: gitRepoDir with: \'-1\'.\nTranscript\n  cr;\n  show: \'==============\'.\nstatusNode := topez\n  lookup: \'status\'\n  ifAbsent: [ \n    topez currentNode\n      addChildNode:\n        (TDTxtLeafNode new\n          name: \'status\';\n          yourself) ].\nstatusNode contents: status.\nstatus ]'},'mapRepos':TDScriptLeafNode{#name:'mapRepos',#contents:'[ :topez :objIn :tokens :windowId | \n| spec version workingCopies mcTool newRepo |\n\"/home/bin/mapRepos Tode filetree:///opt/git/tode/repository\r /home/bin/mapRepos Tode @repo\r\r  ensure that all packages in project have the given repo in repository group.\"\nmcTool := topez toolInstanceFor: \'mc\'.\nnewRepo := mcTool resolveRepositoryReference: (tokens at: 3).\nspec := Metacello image\n  baseline: (tokens at: 2);\n  list.\nversion := spec version.\nworkingCopies := (version packages select: [ :pkgSpec | pkgSpec repositories isEmpty])collect: [ :pkgSpec | pkgSpec workingCopy ].\nworkingCopies := workingCopies select: [ :each | each notNil ].\nworkingCopies\n  do: [ :wc | \n    | rg |\n    rg := wc repositoryGroup.\n    rg repositories do: [ :repo | rg removeRepository: repo ].\n    rg addRepository: newRepo ] ]'},'createAccessors':TDScriptLeafNode{#name:'createAccessors',#contents:'[ :topez :objIn :tokens :windowId | \"/home/bin/createAccessors class\" | theClass newLine varName className target|\r\tclassName := tokens at: 2.\r\ttarget := Smalltalk at: className asSymbol ifAbsent: [ ^nil error: \'Class \', className printString, \' not found.\'].\r  newLine := Character lf asString.\r  theClass := target theNonMetaClass.\r  varName := \'newValue\'.\r  theClass instVarNames\r    do: [ :aSymbol | \r      | aSelector |\r      aSelector := aSymbol asString.\r      (theClass includesSelector: aSymbol)\r        ifFalse: [ \r          theClass\r            compileMethod:\r              aSelector , newLine , newLine\r                , \'   \"Return the value of the instance variable \'\'\' , aSelector\r                , \'\'\'.\"\' , newLine , \'   ^\' , aSelector , newLine\r            dictionaries: #()\r            category: #\'accessing\' ].\r      (theClass includesSelector: (aSelector , \':\') asSymbol)\r        ifFalse: [ \r          theClass\r            compileMethod:\r              aSelector , \': \' , varName , newLine , newLine\r                , \'   \"Modify the value of the instance variable \'\'\' , aSelector\r                , \'\'\'.\"\' , newLine , \'   \' , aSelector , \' := \' , varName\r                , newLine\r            dictionaries: #()\r            category: #\'updating\' ] ]] '}}},'external':TDDirectoryNode{#name:'external',#contents:{'gitRepo':TDObjectGatewayNode{#name:'gitRepo',#contents:'| repo |\rrepo := (self topez lookup: \'repo\') dotSelfObject.\rrepo directory containingDirectory'},'mcRepo':TDObjectGatewayNode{#name:'mcRepo',#contents:'(TDMonticelloRepository fromDescription: \'server:///opt/monticello\') repository'},'repo':TDObjectGatewayNode{#name:'repo',#contents:'(TDMonticelloRepository\n  fromDescription: \'filetree:///opt/git/external/repository\') repository'},'commit':TDTopezLeafNode{#name:'commit',#contents:'/home/bin/commit External @commitMessage'},'commitMessage':TDTxtLeafNode{#name:'commitMessage',#contents:Text{#string:'add a method and remove a method',#runs:RunArray{#runs:[32],#values:[[TextColor{#color:Color{#rgb:0}}]],#lastIndex:1,#lastRun:1,#lastOffset:0}}},'browse':TDTopezLeafNode{#name:'browse',#contents:'browse project External'},'diff':TDTopezLeafNode{#name:'diff',#contents:'mm diff External'},'load':TDTopezLeafNode{#name:'load',#contents:'/home/bin/load External Tests'},'status':TDTxtLeafNode{#name:'status',#contents:'commit 0164e5a1ba5568edcfb4d8d567dda0ec2c2772ec\nAuthor: Dale Henrichs <dhenrich@vmware.com>\nDate:   Wed May 30 12:25:37 2012 -0700\n\n    Switch superclass to BaselineOf (for completeness) Issue #14\n'},'mcDir':TDObjectGatewayNode{#name:'mcDir',#contents:'| repo |\nrepo := (self topez lookup: \'mcRepo\') dotSelfObject.\nrepo directory'},'x':TDTopezLeafNode{#name:'x',#contents:'#mc merge External-Core External-Core.simple-dkh.7 @mcRepo\r#mc merge External-Core External-Core.simple-dkh.8 @mcRepo\rmc merge External-Core External-Core.simple-dkh.9 @mcRepo\r'},'ls-files':TDTxtLeafNode{#name:'ls-files',#contents:Text{#string:'foos:external>git ls-files -u\r100644 e5e1dc07079e3bc287bed9ed2aa9968b3dc2f05c 1\trepository/External-Core.package/ExternalCore.class/class/authorName.st\r100644 2f12c8e29a2857d09bcfe3fb085dbcc3be6d4ff1 2\trepository/External-Core.package/ExternalCore.class/class/authorName.st\r100644 800289781869417cbffdd2d26963e5ad184d0678 3\trepository/External-Core.package/ExternalCore.class/class/authorName.st\r100644 ccbf31ef7e93401de5ae5c04f41e1c69133f4580 1\trepository/External-Core.package/ExternalCore.class/instance/printOn..st\r100644 3325a3fe46087e20fb5fd1a18e5775af1ca464c7 2\trepository/External-Core.package/ExternalCore.class/instance/printOn..st\r100644 a8489138668556be536fdfa0d09a861705b64871 3\trepository/External-Core.package/ExternalCore.class/instance/printOn..st\r100644 48ba2f2d2725335ac6dd1f15ebaf547e0816a222 1\trepository/External-Core.package/ExternalCore.class/methodProperties.json\r100644 214f28aa427ae72bb4fad2aa3afcefc29283809d 2\trepository/External-Core.package/ExternalCore.class/methodProperties.json\r100644 e2d99812f86301cd5399db08b26735196727050f 3\trepository/External-Core.package/ExternalCore.class/methodProperties.json\r100644 58f9e7810ce129106e46802475b6824b0939276a 1\trepository/External-Core.package/monticello.meta/version\r100644 3b3fb6889e375f121b85d98603d0157d65a3f5a6 2\trepository/External-Core.package/monticello.meta/version\r100644 0238781e2a5ea2e893ad0ebeb6f789c028a4ffe1 3\trepository/External-Core.package/monticello.meta/version\r',#runs:RunArray{#runs:[1458],#values:[[TextColor{#color:Color{#rgb:0}}]],#lastIndex:nil,#lastRun:nil,#lastOffset:nil}}}}},'x':TDSmalltalkLeafNode{#name:'x',#contents:'| repo |\nrepo := MCGitHubRepository\n  location: \'github://glassdb/zinc:gemstone3.1/repository\''}}}