TDDirectoryNode{#name:'demo',#contents:{'expression':TDObjectGatewayNode{#name:'expression',#contents:'| cls classes defs |
\"browse list expression\"
classes := Set new.
#(#\'MCFileTreeTodeTool\' #\'TDClassDefinition\' #\'TDDevProcessSupport\')
  do: [ :className | 
    cls := Smalltalk at: className.
    classes addAll: (TDClassDefinition fullHierarchyOf: cls) ].
defs := classes collect: [ :each | TDClassDefinition className: each name ].
TDClassDefinition classHierarchyOrder: defs'},'hello':TDScriptLeafNode{#name:'hello',#contents:'[ :topez :objIn :tokens :windowId | 
| res1 sum childNode|
\"different adder\"
res1 := topez currentNode objectNamed: \'res1\'.
sum := res1 + (tokens at: 2) asInteger.
\tchildNode := (sum asTDNode: topez) name: \'sum\'.
\ttopez currentNode addChildNode: childNode.
\tsum]'},'doit':TDSmalltalkLeafNode{#name:'doit',#contents:'| cls classes defs |
\"browse list classList\"
classes := Set new.
#(#\'MCFileTreeTodeTool\' #\'TDClassDefinition\' #\'TDDevProcessSupport\')
  do: [ :className | 
    cls := Smalltalk at: className.
    classes addAll: (TDClassDefinition fullHierarchyOf: cls) ].
defs := classes collect: [ :each | TDClassDefinition className: each name ].
TDClassDefinition classHierarchyOrder: defs'},'readme':TDTxtLeafNode{#name:'readme',#contents:Text{#string:'Welcome to tODE
---------------

I am a Text object, as you can see.

OBJECTS
-------

There are five different objects visible in this directory:

  bin/  doit*  expression@/  familyTree@/  hello*  readme

Objects with a trailing * are executuble. Remember that \". is not on your path\", so to execute an object, you must supply a full or relative path like the following:

  /demo/doit
  ./hello

Object with a trailing / are navigable directories (containers).

Object with a trailing @/ are navigable objects. Navigable objects may be treated as executable objects, so the following can done:

  ./expression
  ./familyTree

The color of the object indicates the type of object:

  green        - smalltalk code (exectuable)
  bold magenta - smalltalk code (exectuable/navigable)
  bold black   - directory code (navigable)
  blue         - smalltalk code (executable+args)
  brown        - Text instance  (leaf)
  bold brown   - object ref     (navigable)

STANDARD SHELL COMMANDS
-----------------------

You can use the standard shell commands: 

  cd, ls, cat, pwd, ...

to navigate and explore the space.

Keyboard Mappings
-----------------

Main keyboard shortcuts:

  \'CMD-b\'->\'browse class\'
  \'CMD-B\'->\'browse class hierarchy/class def/methods\'
  \'CMD-N\'->\'references to\'
  \'CMD-m\'->\'browse implementors\'
  \'CMD-n\'->\'browse senders\'

  \'CMD-c\'->\'copy object (class/method)\'
  \'CMD-s\'->\'save text\'
  \'CMD-v\'->\'paste object (compile method or add class/method to package)\'
  \'CMD-x\'->\'cut object (remove class/method from system/package)\'

  \'CMD-C\'->\'spawn window\'
  \'CMD-L\'->\'list windows\'
  \'CMD-p\'->\'open window on printString (navigator only)\'

EDITOR SHELL COMMANDS
---------------------

There are four commands used to view the objects:

  inspect - native object view in navigator
  sh      - native object view in shell 
  edit    - custom view (defaults to native)
  print   - view printString of object

navigator provides easy mouse-based object navigation of object graph with limited set of keyboard shortcuts.

shell provides command based object navigation (cd, ds) with access to full command set.

EDIT vs INSPECT
---------------

To get a taste of difference between \"native object view\" and \"custom view\" lets take a look at a the native view for a Dictionary:

  sh familyTree/population/1/daughters/dict
  inspect .

then 

  edit .

then press the `.` line in the navigator.

In navigator `.` toggles between native and custom view. 

In shell, you use the `ds` command to view object structure and you always view the custom view (compare to `edit .` navigator):

  ds .

Close the spawned shell.


DEBUGGER
--------

Before we start writing code, let\'s get introduced to the debugger since you\'re bound to make mistakes:)

Debugger is constructed from a custom navigator (for the stack), a navigator for the receiver and stack frame, and a shell window for debug commands.

DEBUGGER SHORTCUTS
------------------

  \'CMD-i\'->\'step into\'
  \'CMD-j\'->\'up stack\'
  \'CMD-k\'->\'down stack\'
  \'CMD-o\'->\'step over\'
  \'CMD-t\'->\'step thru\'

DEBUGGER COMMANDS
-----------------

  db break @<step-point> <method-ref>
  db break clear [break-list-index] 
  db break enable [break-list-index]
  db break disable [break-list-index]
  db break list 
  db break steps <method-ref>
  db continue 
  db restart 

CUSTOM SHELL COMMANDS
---------------------

Edit the `hello` object:

  edit hello

You can write arbitrary Smalltalk expressions inside the block. 

  topez    - the TDTopezServer instance for the current shell. Lot\'s of goodies (e.g., currentNode) and services (e.g., opening windows) available from this guy.
  objIn    - result of last command. No need to use a pipe, result objects automatically passed along.
  tokens   - OrderedCollection of command and arguments from command line
  windowId - unused...

DEBUGGER IN ACTION
------------------

If you insert the following into the block in the hello command, you\'ll be able play with debugger before getting serious about writing commands: 

  | block |
  block := [ :arg | arg halt ].
  block value: 100

After editting the source, hit `CMD-s` to save the method. Note that the smalltalk code is automatically formatted on accept. 

Drop down to the shell window and type:

  ./hello arg1 arg2

and you should get a \"halt occurred\" prompt. Press the `Debug` button to bring up the debugger.

Click on the shell window for the debugger so that you can use the keyboard shortcuts (right now the keyboard shortcuts only work in the shell window).

Hit `CMD-j` twice to change the stack view to the body of the hello command (frame 5). Note that you can see the state of all of the temp variables in the command block. 

Click on the `topez -> aTDTopezServer` line in the navigator to look at the state of the server instance. Note that the (class) state tells you the class of the object under inspection. 

Hit `CMD-B` to bring up the code browser on the TDTopezServer class. Note that you can see the hierarchy of the class, the class definition, the instance-side methods and the class-side methods. You can click around a bit.

When you\'re down playing with the browser, click on frame 4 in the stack view and then click on the shell window so you can step around a bit.

Hit `CMD-o` a couple of times to see how step works. Note that the method view, the selected stack and the frame context navigator all change as you single step.

In the debugger shell, enter the following:

  db continue

to finish execution ... now close the debugger shell window and note that the other windows close as well.

SHELL COMMANDS AS CUSTOM WORKSPACES
-----------------------------------

The obvious thing about shell commands is that you can pass in arguments using the tokens block arg. This lets you can crate a \"flexible workspace\" without requiring in-place editing:

  [ :topez :objIn :tokens :windowId | 
  \"an adder\"
  (tokens at: 2) asInteger + (tokens at: 3) asInteger ]

or

  [ :topez :objIn :tokens :windowId | 
  \"input a comment\"
  Transcript
    cr;
    show: (tokens at: 2) ]

You can use back quote ($`) to pass in an argument containing spaces or other special shell characters:

  ./hello `this is a test; ./hello > ouch`

The server keeps track of the results of each command that is executed and makes it available to the next command via the `objIn` argument:

  [ :topez :objIn :tokens :windowId | 
  \"chain printStrings\"
  objIn printString ]

See what happens when you execute something like the following:

  ./hello; ./hello; ./hello

For the following examples, let\'s use this block:

  [ :topez :objIn :tokens :windowId | 
  \"an adder that take two integer arguments: `./hello <integer-1> <integer-2>\"
  (tokens at: 2) asInteger + (tokens at: 3) asInteger ]

You can use the redirect character ($>) to stash the result of a command as a nmaed object in a directory node:

  ./hello 3 4 > res1

produces the named object node `res1`. Note that with the current command line parser the $> character need to be surrounded by white space.

You can `cat res1` ` or `res1` or `ds res1` or `inspect res1` to look at the results.

You can use a named object to supply a value for use in your command:

  [ :topez :objIn :tokens :windowId | 
  | res1 |
  \"an adder that adds its integer arg to the object in `res1`: `./hello <integer-1>\"
  res1 := topez currentNode objectNamed: \'res1\'.
  res1 + (tokens at: 2) asInteger ]

and you would use the command as follows:

  ./hello 3
  ./hello 4 > res1
  ./hello 3

You can programmatically create an object node:

  [ :topez :objIn :tokens :windowId | 
  | res1 sum childNode |
  \"an adder that adds its integer arg to the object in `res1`: `./hello <integer-1> and
\tstores the result as object `sum`\"
  res1 := topez currentNode objectNamed: \'res1\'.
  sum := res1 + (tokens at: 2) asInteger.
  childNode := (sum asTDNode: topez) name: \'sum\'.
  topez currentNode addChildNode: childNode.
  sum ]

trying the following:

  ./hello 3
  ./sum

DOIT & RUN
----------

The `doit` and `run` commands can be used to evaluate interactive expressions:

doit
3+4
%

The percent character ($%) terminates the expression input and returns the result of evaluating the expression. 

The `run` command can be similarly used:

run
3+4
%

The two commands differ in the context used for evaluating the expression (value of `self`) and whether or not `objIn` may be used (the `run` command uses `objIn` as the evaluation context if there are no arguments).

The rule of thumb that you should use is: \"Use `doit` unless you want to inspect the infrastructure or need to run expression against `objIn`.

DOIT & RUN
----------

Let\'s start by looking at `res1`:

  ./res1

Now use the `doit` command with `res1` as the argument:

doit res1
self
%

Note that the result is the same as the _value_ of `res1`. 

Now `cd` into `res1` and run the `doit` command with no arguments:

cd res1
doit
self
%

The result is again the same. 

Now execute the `run` command:

run .
self
%

Note that the result a TDObjectNode and not a SmallInteger. Let\'s `inspect` the TDObjectNode result:

  inspect

Note that the contents instance variable in TDObjectNode is the value of `res1`...

BROWSING COMMANDS
-----------------

There are a number of \"standard smalltalk commands\" like senders or implementors. Those actions are covered by the `browse` and `find` commands.

The following `find` commands perform an action and return a collection of TDDefinitions:

  find amethod <method-spec> 
  find class <regex-pattern>
  find method [#]<selector>
  find methods <method-spec-1> <method-spec-2>
  find references <variableOrGlobalNameOrPathRef>
  find rmethod <regex-pattern>
  find rsender <regex-pattern>
  find sender [#]<selector>
  find source <regex-pattern>
  find versions <method-spec>

There is a corresponding list of `browse` commands:

  browse amethod <method-spec>
  browse class <regex-pattern>
  browse diff <method-spec-1> <method-spec-2>
  browse list <definitionList-path>
  browse method [#]<selector>
  browse references <variableOrGlobalNameOrPathRef>
  browse rmethod <regex-pattern>
  browse rsender <regex-pattern>
  browse sender [#]<selector>
  browse source <regex-pattern>
  browse versions <method-spec>

Let\'s try out the `find` command first and then look at the browse variant:

  find method at:put:; inspect
  browse method at:put:

If you click on a definition in the method list, the source for the method will come up. If you use the CMD-B shortcut, the browser for the class will be brought up.

Let\'s try out the `rmethod` variant to see how we can create regular expression-based searches:

  browse rmethod ^at\\:

browses all methods with selectors that start with `at:`. The following command browses all methods with selectors that have an `at:` embedded in them.

  browse rmethod at\\:

CUSTOMIZE CLASS BROWSER
-----------------------

Let\'s look at the `expression` node. First let\'s look a the source:

  edit expression

Then inspect the `expression` node:

  inspect expression

Note that it is a list of class definitions. Now use the `browse list` command to bring up a browser on the class definitions:

  browse list expression

If you click on one of the classes to see that it can be used to drive the class browser. You should be able to build custom class lists that support different workflows.

DOIT AS TOOL CUSTOMIZER
-----------------------

Now we will take what we\'ve learned and apply it to a real world tool customization problem. In the previouse browsing examples the results set was quite large so the utility of those expressions by themselves is limited, but a combination of `doits`, `find` and `browse` commands can be used to quickly refine your searches.

What we\'re going to do is use the `expression` class definition list to filter the senders of at:put: to include only the classes in our pre-defined working set of classes.

Let\'s start by inspecting the senders of at:put:

  find sender at:put: ; inspect

Click on a method defintion and then hit CMD-B to look at the TDMethodDefinition class....

    {describe the simple filter excercise}

',#runs:RunArray{#runs:[33,31,3,3,16,64,6,7,14,14,8,6,2,24,1,189,1,65,2,196,5,37,3,12,40,3,10,31,3,4,43,3,5,31,3,10,31,2,47,2,104,35,511,43,424,31,476,17,259,37,118,35,2,226,44,471,37,154,5,3,7,4,1,2,3,3,3,6,1,2,7,8,3,1499,2,71,192,5,2,5,2,6,2,8,4,12,1,3,6,5,1,1,13,1,6,5,1,1,23,5,2,5,2,6,2,8,4,19,1,12,19,1,6,5,1,1,299,5,2,5,2,6,2,8,4,22,1,7,166,5,2,5,2,6,2,8,4,78,1,3,6,5,1,1,13,1,6,5,1,1,454,5,2,5,2,6,2,8,8,4,3,84,1,6,4,5,26,6,2,6,3,1,6,5,1,1,155,5,2,5,2,6,2,8,8,4,1,3,1,9,3,123,1,6,4,5,26,6,2,5,4,4,3,1,6,5,1,1,12,11,4,1,3,11,5,1,7,5,2,7,27,9,2,5,48,22,622,22,546,35,239,1372,47,1,473,1,47,722],#values:[[TextColor{#color:Color{#rgb:0}},TextEmphasis{#emphasisCode:1,#setMode:true}],[TextColor{#color:@13}],[TextColor{#color:Color{#rgb:1072693248}},TextEmphasis{#emphasisCode:2,#setMode:true}],[@16],[TextColor{#color:Color{#rgb:0}},TextEmphasis{#emphasisCode:1,#setMode:true}],@21,[TextEmphasis{#emphasisCode:1,#setMode:true}],[TextColor{#color:Color{#rgb:524288}}],[TextColor{#color:Color{#rgb:1072694271}},TextEmphasis{#emphasisCode:1,#setMode:true}],[TextColor{#color:Color{#rgb:644035584}},TextEmphasis{#emphasisCode:1,#setMode:true}],[TextColor{#color:Color{#rgb:1023}}],[TextColor{#color:@37}],[TextColor{#color:Color{#rgb:644035584}},TextEmphasis{#emphasisCode:1,#setMode:true}],[@16],@11,@48,[@12,@14],@48,@49,[@16],[TextColor{#color:Color{#rgb:524288}}],[@16],@51,[TextColor{#color:Color{#rgb:1072694271}},TextEmphasis{#emphasisCode:1,#setMode:true}],[@16],@55,[TextEmphasis{#emphasisCode:1,#setMode:true}],[@16],@60,[TextColor{#color:Color{#rgb:1023}}],[@16],@63,[TextColor{#color:Color{#rgb:644035584}}],[@16],@67,[@45,@47],[@16],[@64],[TextColor{#color:@24},TextEmphasis{#emphasisCode:1,#setMode:true}],[@64],[TextColor{#color:@24}],[TextColor{#color:@24},TextEmphasis{#emphasisCode:1,#setMode:true}],@78,[TextColor{#color:@24},TextEmphasis{#emphasisCode:1,#setMode:true}],@78,[TextColor{#color:@24},TextEmphasis{#emphasisCode:1,#setMode:true}],@78,@83,@78,[@84,@85],[@79],@89,@90,[TextEmphasis{#emphasisCode:0,#setMode:true}],@83,[TextColor{#color:@24}],@89,@93,[TextColor{#color:Color{#rgb:512}}],@93,[TextColor{#color:Color{#rgb:512}}],@93,[TextColor{#color:Color{#rgb:524288}}],@93,[TextColor{#color:Color{#rgb:512}}],@93,[TextColor{#color:Color{#rgb:512}}],@93,[TextColor{#color:Color{#rgb:524288}}],[TextColor{#color:@24}],@98,@93,[TextColor{#color:Color{#rgb:536870912}}],[TextEmphasis{#emphasisCode:0,#setMode:true}],@90,@83,[TextColor{#color:@24}],@104,@93,@104,@93,@104,@93,@104,@93,[TextColor{#color:Color{#rgb:451328430}}],@93,[TextColor{#color:Color{#rgb:524288}}],@107,@93,@115,[TextColor{#color:Color{#rgb:524288}}],@93,@125,@107,@93,@115,@128,@120,@104,@93,@104,@93,@104,@93,@104,@93,@122,@93,[TextColor{#color:Color{#rgb:512}}],@93,@125,@107,@93,@115,@128,@120,@104,@93,@104,@93,@104,@93,@104,@93,@122,@93,@107,@120,@104,@93,@104,@93,@104,@93,@104,@93,@122,@93,@125,@107,@93,@115,@128,@93,@125,@107,@93,@115,@128,@120,@104,@93,@104,@93,@104,@93,@104,@93,@95,@93,@122,@93,@98,@93,@107,@93,[TextColor{#color:Color{#rgb:536871424}}],@113,@98,@93,@125,@107,@93,@115,@128,@120,@104,@93,@104,@93,@104,@93,@104,@93,@95,@93,@95,@93,@95,@93,[@123],@93,@98,@93,@107,@93,@134,@113,@98,@93,@98,@93,@125,@107,@93,@115,@128,@113,@98,@93,@125,@98,@93,@107,@128,@93,@134,@113,@107,@93,@98,@113,@98,[@94],[@84,@85],@138,@139,@138,[@84,@85],@138,[TextEmphasis{#emphasisCode:0,#setMode:true}],@83,@138,@141,@138,@83,@138],#lastIndex:12133,#lastRun:238,#lastOffset:719}}},'bin':TDDirectoryNode{#name:'bin',#contents:{'create':TDScriptLeafNode{#name:'create',#contents:'[ :topez :objIn :tokens :windowId | 
| generations adam eve familyTree |
\"./create <number of generations> > familyTree (default: 3 generations)\"
generations := 3.
tokens size > 1
  ifTrue: [ generations := (tokens at: 2) asNumber ].
adam := IXPerson createMale.
adam
  firstName: \'Adam\';
  middleName: \'Oscar\';
  lastName: \'Addams\'.
eve := IXPerson createFemale.
eve
  firstName: \'Eve\';
  middleName: \'Penny\';
  lastName: \'Addams\'.
familyTree := IXFamilyTree new
  adam: adam;
  eve: eve;
  yourself.
familyTree createGenerations: generations ]'},'export':TDScriptLeafNode{#name:'export',#contents:'^ [ :topez :objIn :tokens :windowId | 
| tool node fileSystemPath |
\"export <fileSystemPath>\"
node := topez currentNode.
fileSystemPath := tokens at: 2.
tool := topez toolInstanceFor: \'ston\'.
STONWriter
    plainTextNewlinesDuring: [tool stonExportNode: node to: fileSystemPath] ]'}}}}}