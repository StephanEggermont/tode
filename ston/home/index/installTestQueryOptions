TDScriptLeafNode{#name:'installTestQueryOptions',#contents:'[ :topez :objIn :tokens :command | 
| opts args restore init stoneNRS netldiName expression verbose |
\"for help: ./installTestQueryOptions -h\"
command
  getOptsMixedLongShort:
    {#(\'help\' $h #\'none\').
    #(\'init\' $i #\'none\').
    #(\'restore\' $r #\'none\').
    #(\'netldi\' nil #\'required\').
    #(\'verbose\' $v #\'none\')}
  optionsAndArguments: [ :options :operands | 
    opts := options.
    args := operands ].
stoneNRS := GsNetworkResourceString defaultFromCurrentStone.
opts
  at: \'verbose\'
  ifAbsent: [ verbose := false ]
  ifPresent: [ :ignored | verbose := true ].
opts
  at: \'netldi\'
  ifAbsent: [ 
    | stoneName |
    stoneName := stoneNRS body.
    (stoneName beginsWith: \'j_\')
      ifTrue: [ netldiName := \'j_gs64ldi\' ].
    (stoneName beginsWith: \'k_\')
      ifTrue: [ netldiName := \'k_gs64ldi\' ].
    (stoneName beginsWith: \'l_\')
      ifTrue: [ netldiName := \'l_gs64ldi\' ] ]
  ifPresent: [ :optValue | netldiName := optValue ].
verbose
  ifTrue: [ 
    Transcript
      cr;
      show: \'netldi=\' , netldiName printString ].
expression := \'GsQuery defaultQueryOptions: (GsQueryOptions new
    setApplyDeMorgansLaws;
    setConsolidateEnumerablePredicates;
    setConsolidateRangePredicates;
    setNormalizePredicates;
    setRemoveRedundantPredicates;
    setReorderPredicates;
    setTransformCommonPaths).
System commit\'.
opts
  at: \'init\'
  ifPresent: [ :optValue | 
    expression := \'GsQueryFormula
    negatedOperatorMap;
    inverseOperatorMap;
    comparisonSelectorMap.
System commit\' ].
opts
  at: \'restore\'
  ifPresent: [ :optValue | 
    expression := \'GsQuery defaultQueryOptions: (GsQueryOptions default ).
System commit\' ].
opts
  at: \'help\'
  ifAbsent: [ 
    | systemUser gemNRS |
    gemNRS := GsNetworkResourceString new
      protocol: \'tcp\';
      node: \'foos\';
      netldi: netldiName;
      resource: \'task\';
      body: GsNetLDI gemnetobject;
      yourself.
    systemUser := GsExternalSession new
      stoneNRS: stoneNRS;
      gemNRS: gemNRS;
      username: \'SystemUser\';
      password: \'swordfish\';
      yourself.
    [ 
    systemUser login.
    systemUser executeString: expression ]
      ensure: [ systemUser ifNotNil: [ systemUser logout ] ] ]
  ifPresent: [ :ignored | 
    TDManPage
      viewManPage:
        \'NAME
  installTestQueryOptions - installTestQueryOptions utility
SYNOPSIS
  installTestQueryOptions [-h|--help] [--init] [--restore] [--netldi=<netldi-name>]
\t\t                   [-v|--verbose]
DESCRIPTION
  Since SystemUser owns the GsQuery class>>defaultQueryOptions: slot, the default
  values cannot be easily changed for tests. This utility uses GsExternalSession
  to login as SystemUser and change the option settings.

  With no options set, this utility defines the GsQuery class>>defaultQueryOptions:
  as follows:

    GsQuery defaultQueryOptions: (GsQueryOptions new
      setApplyDeMorgansLaws;
      setConsolidateEnumerablePredicates;
      setConsolidateRangePredicates;
      setNormalizePredicates;
      setRemoveRedundantPredicates;
      setReorderPredicates;
      setTransformCommonPaths).

  With the restore option set, this utility restores the standard defaults:

    GsQuery defaultQueryOptions: (GsQueryOptions default ).

  With the init option set, the GsQueryFormula class is initialized:

    GsQueryFormula
      negatedOperatorMap;
      inverseOperatorMap;
      comparisonSelectorMap.

  The verbose option logs detailed information to the Transcript.
EXAMPLES
\'
      topez: topez ] ]',#creationTime:DateAndTime['2013-11-12T21:02:09.7072319984436-08:00'],#modificationTime:DateAndTime['2013-11-12T21:57:09.5330491065979-08:00']}